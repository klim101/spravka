# admin_secret.py
from __future__ import annotations
import datetime as dt
from typing import Optional, Sequence
import pandas as pd
import streamlit as st
import altair as alt
import streamlit.components.v1 as components

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 1) –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
#    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî Konami (–±–µ–∑ Ctrl/Shift), —á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª —Ö–æ—Ç–∫–µ–π.
#    –ü—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ -> –¥–æ–±–∞–≤–ª—è–µ–º ?admin=1 –∫ URL –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É.
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
_KONAMI = ["ArrowUp","ArrowUp","ArrowDown","ArrowDown","ArrowLeft","ArrowRight","ArrowLeft","ArrowRight","b","a","Enter"]

def inject_secret_listener(sequence: Optional[Sequence[str]] = None, key: str = "admin_secret_js") -> None:
    seq = list(sequence or _KONAMI)
    # –í–∞–∂–Ω–æ: height=0, —á—Ç–æ–±—ã –Ω–µ –∑–∞–Ω–∏–º–∞—Ç—å –º–µ—Å—Ç–æ; use_container_width –Ω–µ –Ω—É–∂–µ–Ω
    components.html(f"""
<div></div>
<script>
(function() {{
  const seq = {seq!r};
  let buf = [];
  // –ª–æ–≤–∏–º –Ω–∞ —Å–∞–º–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ, –±–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
  window.addEventListener('keydown', function(e) {{
    const k = e.key;
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç—ã –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã ‚Äî —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –±—Ä–∞—É–∑–µ—Ä–æ–º
    if (e.ctrlKey || e.altKey || e.metaKey) return;
    buf.push(k);
    if (buf.length > seq.length) buf.shift();
    let ok = true;
    for (let i=0; i<seq.length; i++) {{
      if (buf[i] !== seq[i]) {{ ok = false; break; }}
    }}
    if (ok) {{
      try {{
        const url = new URL(window.parent.location.href);
        url.searchParams.set('admin','1');
        window.parent.history.replaceState({{}},'', url);
        window.parent.location.reload();
      }} catch(err) {{
        // fall back ‚Äî –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
        window.parent.location.href = window.parent.location.href.split('#')[0].split('?')[0] + '?admin=1';
      }}
    }}
  }}, true);
}})();
</script>
""", height=0, key=key)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 2) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∞ –ø–æ query-–ø–∞—Ä–∞–º–µ—Ç—Ä—É + –∫–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def init_admin_mode(auto_inject: bool = True, sequence: Optional[Sequence[str]] = None) -> bool:
    if auto_inject:
        inject_secret_listener(sequence=sequence)

    params = st.experimental_get_query_params()
    is_admin = (params.get("admin", ["0"])[0] == "1")
    return is_admin

def exit_admin():
    st.experimental_set_query_params(admin="0")
    st.experimental_rerun()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 3) –†–µ–Ω–¥–µ—Ä –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: –≥—Ä–∞—Ñ–∏–∫ —á–∞—Å–æ–≤ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
#    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–∏—Ä–∞–µ–º –∫–æ–ª–æ–Ω–æ–∫–∏ –ø–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º.
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
_EMP_COL_CANDIDATES = ["employee","user","name","first_name","–§–ò–û","–°–æ—Ç—Ä—É–¥–Ω–∏–∫","—Å–æ—Ç—Ä—É–¥–Ω–∏–∫"]
_DATE_COL_CANDIDATES = ["work_date","date","–î–∞—Ç–∞","–¥–∞—Ç–∞"]
_HOURS_COL_CANDIDATES = ["hours","–ß–∞—Å—ã","—á–∞—Å—ã"]

def _guess_col(df: pd.DataFrame, candidates: list[str]) -> Optional[str]:
    cols_lower = {c.lower(): c for c in df.columns}
    for cand in candidates:
        if cand.lower() in cols_lower:
            return cols_lower[cand.lower()]
    # –≤—Ç–æ—Ä–æ–π —à–∞–Ω—Å: –ø–æ —Ç–∏–ø–∞–º
    if candidates is _HOURS_COL_CANDIDATES:
        # —Å–∞–º–∞—è "—á–∞—Å–æ–≤–∞—è" –∫–æ–ª–æ–Ω–∫–∞ ‚Äî —á–∏—Å–ª–æ–≤–∞—è —Å –º–∞–∫—Å. —Å—Ä–µ–¥–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤ —Ä–∞–∑—É–º–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        num_cols = [c for c in df.columns if pd.api.types.is_numeric_dtype(df[c])]
        return num_cols[0] if num_cols else None
    if candidates is _DATE_COL_CANDIDATES:
        date_like = [c for c in df.columns if "date" in c.lower() or "–¥–∞—Ç–∞" in c.lower()]
        return date_like[0] if date_like else None
    return None

def render_admin_panel(
    df_times: pd.DataFrame,
    employee_col: Optional[str] = None,
    date_col: Optional[str] = None,
    hours_col: Optional[str] = None,
    title: str = "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ —á–∞—Å–∞–º",
    default_days: int = 30,
):
    st.title(title)
    st.caption("–°–µ–∫—Ä–µ—Ç–Ω–∞—è –ø–∞–Ω–µ–ª—å. –ù–∞–∂–º–∏—Ç–µ ¬´–í—ã–π—Ç–∏¬ª, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º.")
    st.button("‚èèÔ∏è –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞", on_click=exit_admin)

    if df_times is None or df_times.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –ü–µ—Ä–µ–¥–∞–π—Ç–µ DataFrame –≤ render_admin_panel().")
        return

    # –∞–≤—Ç–æ-–¥–µ—Ç–µ–∫—Ç –∫–æ–ª–æ–Ω–æ–∫
    employee_col = employee_col or _guess_col(df_times, _EMP_COL_CANDIDATES)
    date_col     = date_col     or _guess_col(df_times, _DATE_COL_CANDIDATES)
    hours_col    = hours_col    or _guess_col(df_times, _HOURS_COL_CANDIDATES)

    missing = [("—Å–æ—Ç—Ä—É–¥–Ω–∏–∫", employee_col), ("–¥–∞—Ç–∞", date_col), ("—á–∞—Å—ã", hours_col)]
    missing = [label for label, col in missing if not col]
    if missing:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏: " + ", ".join(missing))
        st.info("–ü–æ–¥—Å–∫–∞–∑–∫–∞: —É–∫–∞–∂–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã employee_col=‚Ä¶, date_col=‚Ä¶, hours_col=‚Ä¶ –≤—Ä—É—á–Ω—É—é.")
        st.dataframe(df_times.head())
        return

    # –ø—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø—ã
    df = df_times.copy()
    df[date_col] = pd.to_datetime(df[date_col], errors="coerce").dt.date
    df = df.dropna(subset=[date_col])
    if not pd.api.types.is_numeric_dtype(df[hours_col]):
        df[hours_col] = pd.to_numeric(df[hours_col], errors="coerce")
    df = df.dropna(subset=[hours_col])

    # –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
    today = dt.date.today()
    min_d = df[date_col].min() or (today - dt.timedelta(days=default_days))
    max_d = df[date_col].max() or today
    default_start = max(max_d - dt.timedelta(days=default_days), min_d)

    start, end = st.date_input(
        "–ü–µ—Ä–∏–æ–¥",
        (default_start, max_d),
        min_value=min_d,
        max_value=max_d
    )
    if isinstance(start, tuple):
        # Streamlit < 1.30 –∏–Ω–æ–≥–¥–∞ —Ç–∞–∫ –æ—Ç–¥–∞—ë—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
        start, end = start

    # —Ñ–∏–ª—å—Ç—Ä
    mask = (df[date_col] >= start) & (df[date_col] <= end)
    dff = df.loc[mask].copy()

    # –∞–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
    agg = (
        dff.groupby(employee_col, dropna=False)[hours_col]
        .sum()
        .reset_index()
        .rename(columns={employee_col: "–°–æ—Ç—Ä—É–¥–Ω–∏–∫", hours_col: "–ß–∞—Å—ã"})
    )
    agg = agg.sort_values("–ß–∞—Å—ã", ascending=False)

    c = (
        alt.Chart(agg)
        .mark_bar()
        .encode(
            y=alt.Y("–°–æ—Ç—Ä—É–¥–Ω–∏–∫:N", sort="-x", title="–°–æ—Ç—Ä—É–¥–Ω–∏–∫"),
            x=alt.X("–ß–∞—Å—ã:Q", title="–°—É–º–º–∞ —á–∞—Å–æ–≤"),
            tooltip=["–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–ß–∞—Å—ã"]
        )
        .properties(height=max(300, 20 * len(agg)), width="container")
    )
    st.altair_chart(c, use_container_width=True)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –¥–∏–Ω–∞–º–∏–∫–∞ –ø–æ –¥–Ω—è–º (stacked area)
    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –ø–æ –¥–Ω—è–º"):
        dline = (
            dff.groupby([date_col, employee_col])[hours_col]
            .sum()
            .reset_index()
            .rename(columns={date_col: "–î–∞—Ç–∞", employee_col: "–°–æ—Ç—Ä—É–¥–Ω–∏–∫", hours_col: "–ß–∞—Å—ã"})
        )
        lc = (
            alt.Chart(dline)
            .mark_area(opacity=0.6)
            .encode(
                x=alt.X("–î–∞—Ç–∞:T", title="–î–∞—Ç–∞"),
                y=alt.Y("–ß–∞—Å—ã:Q", stack="zero", title="–ß–∞—Å—ã"),
                color=alt.Color("–°–æ—Ç—Ä—É–¥–Ω–∏–∫:N", legend=alt.Legend(title="–°–æ—Ç—Ä—É–¥–Ω–∏–∫")),
                tooltip=["–î–∞—Ç–∞","–°–æ—Ç—Ä—É–¥–Ω–∏–∫","–ß–∞—Å—ã"]
            )
            .properties(height=350, width="container")
        )
        st.altair_chart(lc, use_container_width=True)
